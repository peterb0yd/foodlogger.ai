// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          String       @id @default(uuid())
    email       String       @unique
    name        String?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    stripeCustomerId String?
    stripeSubscriptionId String?
    stripeSubscriptionStatus StripeSubscriptionStatus?
    foodLogs    FoodLog[]
    sleepLogs   SleepLog[]
    moodLogs    MoodLog[]
    anxietyLogs AnxietyLog[]
    poopLog     PoopLog[]
}

model FoodItem {
    id          String        @id @default(uuid())
    name        String
    description String?
    foodLogs    FoodLog[]
    foodItemLog FoodItemLog[]
}

model FoodItemLog {
    id            String   @id @default(uuid())
    foodItem      FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId    String
    foodLog       FoodLog  @relation(fields: [foodLogId], references: [id])
    foodLogId     String
    quantityCups  Int
    quantityTbsp  Int
    quantityTsp   Int
    quantityGrams Int
}

model FoodLog {
    id          String        @id @default(uuid())
    user        User          @relation(fields: [userId], references: [id])
    userId      String
    foodItems   FoodItem[]
    image       String?
    date        DateTime
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    foodItemLog FoodItemLog[]
}

model SleepLog {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    date      DateTime
    quality   Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PoopLog {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    date      DateTime
    quality   Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MoodLog {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    date      DateTime
    quality   Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AnxietyLog {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    date      DateTime
    quality   Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum StripeSubscriptionStatus { 
    active
    canceled
    incomplete
    incomplete_expired
    past_due
    trialing
    unpaid
}